# NYC Taxi Autoloader Streaming Pipeline Configuration
# This pipeline uses Databricks Autoloader for true file-based streaming

resources:
  pipelines:
    nyc_taxi_autoloader_pipeline:
      name: nyc_taxi_autoloader_streaming_pipeline
      catalog: nyc_trips_${bundle.target}
      schema: bronze
      
      # Use serverless compute for cost efficiency  
      serverless: true
      
      # Pipeline paths
      root_path: /Workspace/Users/${workspace.current_user.userName}/.bundle/${bundle.name}/${bundle.target}/files/src
      
      # Main pipeline notebook
      libraries:
        - notebook:
            path: ../src/dlt_autoloader_pipeline.ipynb
            
      # Pipeline configuration
      configuration:
        bundle.sourcePath: ${workspace.file_path}/src
        
        # Streaming checkpoints for Autoloader
        # "spark.sql.streaming.checkpointLocation": "/Volumes/nyc_trips_${bundle.target}/bronze/_checkpoints/taxi_autoloader"
        
        # # Schema evolution and hints for Autoloader
        # "pipelines.autoloader.schemaLocation": "/Volumes/nyc_trips_${bundle.target}/bronze/landing_zone/_schemas"
        # "pipelines.autoloader.schemaHints": |
        #   tpep_pickup_datetime timestamp,
        #   tpep_dropoff_datetime timestamp, 
        #   trip_distance double,
        #   fare_amount double,
        #   pickup_zip int,
        #   dropoff_zip int
          
        # Performance optimization
        # "spark.sql.adaptive.enabled": "true"
        # "spark.sql.adaptive.coalescePartitions.enabled": "true"
        # "spark.sql.streaming.trigger.processingTime": "30 seconds"  # Process every 30 seconds
        
        # Volume path for landing zone (can be overridden)
        "landing_zone.volume_path": "/Volumes/nyc_trips_${bundle.target}/bronze/landing_zone"
        
      # Development mode settings
      development: true
      
      # Expectations configuration
      # expectations:
      #   action: "ALLOW"  # Allow pipeline to continue with warnings during development
        
      # Notifications (optional)
      # notifications:
      #   - email_recipients: ["${workspace.current_user.userName}"]
      #     alerts: ["on-update-failure", "on-flow-failure"]
